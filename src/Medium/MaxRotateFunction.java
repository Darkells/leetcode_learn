package Medium;

/**
 * 给定一个长度为 n 的整数数组 A 。
 *
 * 假设 Bk 是数组 A 顺时针旋转 k 个位置后的数组，我们定义 A 的“旋转函数” F 为：
 *
 * F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]。
 *
 * 计算F(0), F(1), ..., F(n-1)中的最大值。
 *
 * 注意:
 * 可以认为 n 的值小于 105。
 *
 * 示例:
 *
 * A = [4, 3, 2, 6]
 *
 * F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
 * F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
 * F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
 * F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
 *
 * 所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/rotate-function
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/**
 * 暴力法　计算每次旋转后的值比较　　时间复杂度O(n²)
 *
 * 题意: [4, 3, 2, 6] -> [6, 4, 3, 2] -> [2, 6, 4, 3] -> [3, 2, 6, 4];
 * 设数字A长度为n, 各项和为sum, F(0) = 0 * 4 + 1 * 3 + 2 * 2 + 3 * 6, F(1) = 0 * 6 + 1 * 4 + 2 * 3 + 3 * 2;
 * 由F(0)变成F(1), 需要将最后一项3 * 6减去, 也就是F(0) - (n-1) * A[最后一项], 同时除了最后一项都加多自己一次,
 * 也就是F(0) - (n-1) * A[最后一项] + sum, 但不需要第一项6, 即F(0) - (n-1) * A[最后一项] + sum - A[最后一项],
 * 最终化简为F(0) + sum - n * A[最后一项],
 *
 * 由于最后一项每次向前一位, 即n-i
 *
 */
public class MaxRotateFunction {
    public int maxRotateFunction(int[] A) {
        int sum = 0, F=0;

        for (int i = 0; i < A.length; i++) {
            sum += A[i];
            F += i * A[i];
        }

        int max=F;
        for(int i=A.length-1;i>0;--i){
            F+=(sum-A.length*A[i]);
            if(max<F)
                max=F;
        }
        return max;
    }
}
